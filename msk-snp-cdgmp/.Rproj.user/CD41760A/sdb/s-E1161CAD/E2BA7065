{
    "collab_server" : "",
    "contents" : "rm(list=ls(all=TRUE))\nsetwd(\"~/msk-snp-cdgmp/cdg-data/\")\nsnp.data<-read.csv(\"cdgSNPmatrix-Jinyuan_roy.csv\", sep =\",\", header = T, row.names = 1)\nsnp.by.gene <- split(snp.data, strtrim(rownames(snp.data), 8))\nsnp.by.gene.uniq <- lapply(snp.by.gene, function(x) unique(x))\ntest1 <- snp.by.gene.uniq[[1]]\ntest1<-t(test1)\n\ncdgmp.data<-read.csv(\"cdgTable.csv2\", sep =\",\", header =T)\nm.cdgmp<-tapply(cdgmp.data$logcdg,cdgmp.data$strains,mean )\nnames(m.cdgmp)[16]<-gsub(\"pa_.+_\", \"\", names(m.cdgmp)[16])\nm.cdgmp<-m.cdgmp[rownames(test1)]\n\n\neta=0.1#the learning rate\n#based on genes\nsnp.by.gene.uniq\n##dist(snp.by.gene.uniq)\n\n# #reducing the data dimensionality, grouping by hclust\n#dist.training.snps<-dist(training.snps, method = 'manhattan')\n# cluster.dist.training.snps<-hclust(dist.training.snps)\n# plot(cluster.dist.training.snps)\n# ct<-cutree(cluster.dist.training.snps, k=4)\n# length(which(ct ==1))\n# length(snps[which(ct == 1)])\n\ntest1 <- snp.by.gene.uniq[[1]]\nsnps<-t(test1)\n\nneuralFunction<-function(x){\n  performance<-list()\n  hit.acc<-list()\n  test.hit.acc<-list()\n  for (trials in 1:10) {\n    \n    #randomly splitting the SNPS strains into training and predictive testing sets\n    split.indeces<-split(1:30, sample(rep(1:2, c(20,10))))\n    training.snps<-snps[split.indeces$`1`,] # N =20\n    test.snps<-snps[split.indeces$`2`,]\n    training.cdgmp<-m.cdgmp[rownames(training.snps)]\n    testing.cdgmp<-m.cdgmp[rownames(test.snps)]\n    \n    #declaring targets for di-gmp levels high, medium low\n    t1 <- as.matrix(ifelse(training.cdgmp > -.5, 1,0 )) # high\n    t2 <- as.matrix(ifelse(training.cdgmp < -.5 & training.cdgmp > -1.5, 1,0)) # medium \n    t3 <- as.matrix(ifelse(training.cdgmp  < -1.5 , 1,0 )) #low\n    targets<-cbind(t1,t2,t3)\n    \n    weight_bias<-NULL\n    for(i in 1:3){\n      w <- runif(ncol(training.snps), 1e-3, 1e-2)\n      b <- runif(1)\n      weight_bias<-cbind(weight_bias,as.matrix(c(w,b)))\n    }\n    \n    \n    training.snps2<-cbind(training.snps,rep(1,20))\n    \n    wdf=data.frame(w1=numeric(), w2=numeric(),w3=numeric(),w4=numeric(), b=numeric()) \n    nwdf<-list(wdf,wdf,wdf)\n    accuracy<-list()\n    training.snps2  \n    weight_bias\n    for (generation in 1:1000){\n      linear.combination<-training.snps2 %*% weight_bias\n      \n      y <- exp(linear.combination) / rowSums(exp(linear.combination))\n      e<-targets-y\n      for (neuron in 1:3){\n        weight_bias[5,neuron]=weight_bias[5,neuron]-eta*(-sum(e[,neuron])/20)\n        for (weight in 1:ncol(training.snps)){\n          gc<-training.snps2[,weight]*e[,neuron]\n          weight_bias[weight,neuron]=weight_bias[weight,neuron] - eta* (-sum(gc)/20)\n        }\n        nwdf[[neuron]]<-rbind(nwdf[[neuron]],t(weight_bias)[neuron,])    \n      }  \n      accuracy[[generation]]<-length(which(max.col(y)==max.col(targets)))/20\n    }\n    \n    \n    \n    final.wts <- matrix(c(nwdf[[1]][1000,], nwdf[[2]][1000,], nwdf[[3]][1000,]), nrow=7, byrow=F)\n    \n    final.wts2 <- matrix(unlist(final.wts), nrow=7, byrow = F)\n    L<-training.snps2 %*% final.wts2\n    y <- exp(L) / rowSums(exp(L))\n    hits<-length(which(round(y[,1])==targets[,1] & round(y[,2])==targets[,2] & round(y[,3])==targets[,3]))\n    hit.acc<-rbind(hit.acc, hits/20)\n    \n    \n    \n    test1 <- as.matrix(ifelse(testing.cdgmp > -.5, 1,0 )) # high\n    test2 <- as.matrix(ifelse(testing.cdgmp < -.5 & testing.cdgmp > -1.5, 1,0)) # medium \n    test3 <- as.matrix(ifelse(testing.cdgmp  < -1.5 , 1,0 )) #low\n    test.targets<-cbind(test1,test2,test3)\n    \n    test.snps<-cbind(test.snps,rep(1,10))\n    \n    test.line<-test.snps %*% final.wts2\n    test.y <- exp(test.line) / rowSums(exp(test.line))\n    test.hits<-length(which(round(test.y[,1])==test.snps[,1] & round(test.y[,2])==test.snps[,2] & round(test.y[,3])==test.snps[,3]))\n    \n    test.hit.acc<-rbind(test.hit.acc,test.hits/10, deparse.level = 1)\n  }\n  performance<-list(hit.acc, range(hit.acc), test.hit.acc, range(test.hit.acc))\n  names(performance)<-c(\"self-prediction\",\"range_self_predict\", \"external.prediction\", \"range_external_prediction\")\n  return(performance)\n}\n\n\nout<-lapply(snp.by.gene.uniq, function(x)\n  neuralFunction(snps)\n)\n\nout.df <- lapply(out, function(x) data.frame(self=unlist(x$`self-prediction`[,1]), target=unlist(x$`external.prediction`[,1])))\n\nfor(i in 1:length(out.df)) {\n  n <- names(out.df[i]);\n  boxplot(out.df[[i]], ylim=c(0,1), ylab=\"accuracy\", las=1, main=n);\n  stripchart(out.df[[i]], vertical = T, method = 'jitter', add = TRUE, pch=16, col=1:2, ylim=c(0,1));\n}\n\n\n\n\n\n\nlibrary(ape)\nsetwd(\"~/msk-snp-cdgmp/cdg-data/\")\ntr=read.tree(\"cdg-tree-v1-mid.dnd\")\ntxt.names=read.table(\"cdg.strains.txt3\", sep=\"\\t\", header = F, row.names = 1)\ntr$tip.label <- as.character(txt.names[tr$tip.label,]) #\n#tr$tip.label<-as.character(txt.names$V2[match(tr$tip.label, txt.names$V1)])\nplot(tr, font =1)\nadd.scale.bar()\n\nlibrary(phylobase)\nlibrary(phylotools)\ntr$tip.label<-gsub(\"pa_.+_\", \"\",tr$tip.label)\nt.snp.data<-t(snp.data)\nace(t.snp.data[tr$tip.label,1],tr,type= \"d\")\n\nplot(tr)\ncolumn=1\nco <- c(\"blue\", \"yellow\")\ntr.unrooted<-unroot(tr)\nplot.mpr <- function(column=1) {\n  plot.phylo(tr, main = colnames(t.snp.data)[column])\n  tmpr<-MPR(t.snp.data[,column], tr.unrooted, outgroup = \"F34365\")\n  #nodelabels(paste(\"[\", tmpr[, 1], \",\", tmpr[, 2], \"]\", sep = \"\")) \n  tiplabels(t.snp.data[,column][tr.unrooted$tip.label], adj = -2)\n  return(tmpr)\n}\n\n\n\n\n\n# \n# tmpr\n# class(tr$tip.label)\n# dim(tr$tip.label)\n# match(tr$tip.label, t.snp.data)\n# snp.data\n# \n# rownames(t.snp.data)\n# tr$tip.label\n# match(rownames(t.snp.data), tr$tip.label)\n# length(match(rownames(t.snp.data), tr$tip.label))\n# ace([tr.unrooted$tip.label,1],tr,type= \"d\")\n# snp.data[tr$tip.label,1]\n# dim(t.snp.data)\n# \n# tr$tip.label\n# \n# class(t.snp.data[,1])\n# dim(t.snp.data[,1])\n# structure(t.snp.data[,1])\n# \n# tr$tip.label\n# dim(t(snp.data))\n# ######ace(t.snp.data[tr$tip.label,1],tr,type= \"d\")\n# \n# dim(as.matrix(t(snp.by.gene.uniq)))\n# ace(t(snp.data,tr, type=\"d\"))\n# tr\n# dim(t(snp.data))\n# ace([tr.unrooted$tip.label,1],tr,type= \"d\")\n# length(snp.by.gene.uniq)\n# tr\n# as.matrix(tr)\n# ph.t <- t(ph.mat)\n# rownames(ph.t) <- gsub(\"X\", \"x\", rownames(ph.t))\n# rownames(t.snp.data)[tr$tip.label,1]\n# dim(t.snp.data[,1])\n# \n# ace(t.snp.data[tr$tip.label,1],tr,type=\"d\")\n# t.snp.data[tr$tip.label,1]\n# strep.ace<-ace(ph.t[tr.unrooted$tip.label,1],tr,type= \"d\")\n# co <- c(\"blue\", \"yellow\")\n",
    "created" : 1500039741100.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "230957970",
    "id" : "E2BA7065",
    "lastKnownWriteTime" : 1500041135,
    "last_content_update" : 1500041135987,
    "path" : "~/msk-snp-cdgmp/cdg-data/july-14_nnet_cidigmp.R",
    "project_path" : "cdg-data/july-14_nnet_cidigmp.R",
    "properties" : {
        "notebook_format" : "html_document",
        "tempName" : "Untitled5"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
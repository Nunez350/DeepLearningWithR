{
    "collab_server" : "",
    "contents" : "rm(list=ls(all=TRUE))\n\nlibrary(\"tsne\")\nlibrary(\"Rtsne\")\nsnp.data<-read.csv(\"~/msk-snp-cdgmp/cdg-data/cdgSNPmatrix-Jinyuan_roy.csv\", sep =\",\", header = T, row.names = 1)\nsnp.by.gene <- split(snp.data, strtrim(rownames(snp.data), 8))\nsnp.by.gene.uniq <- lapply(snp.by.gene, function(x) unique(x))\nsnps<-lapply(snp.by.gene.uniq, function(x) t(x))\nhead(snps)\nsnps\ncdgmp.data<-read.csv(\"cdgTable.csv2\", sep =\",\", header =T)\nm.cdgmp<-tapply(cdgmp.data$logcdg,cdgmp.data$strains,mean )\nnames(m.cdgmp)[16]<-gsub(\"pa_.+_\", \"\", names(m.cdgmp)[16])\nm.cdgmp<-m.cdgmp[rownames(snps[[1]])]\nm.cdgmp\ngene1<-snp.by.gene.uniq[[1]]\nt <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))\ntg<-t(gene1)\n#library(Matrix)\nmt<-tg#cbind(tg,t)\nsplit<-sample(nrow(mt), floor(0.70*nrow(mt)))\n\ntrain<-mt[split,]\ntest<-mt[-split,]\ndim(train)\n#?tsne\nd.gene1<-dist(snp.by.gene.uniq[[1]])\ngene50<-snp.by.gene.uniq[[50]]\ngene1<-snp.by.gene.uniq[[1]]\nd.gene50<-dist(snp.by.gene.uniq[[50]])\n#p.value(gene1, df =1)\nn1<-31\nn2<-40\nran=noquote(c(21,\":\",30))\npar(mfrow=c(2,5))  \nx<-snp.by.gene.uniq[1:10]\nstr(x)\nclass(x)\nx\nMap(unlist(x),i)\nnrow(snp.by.gene.uniq[[1]])\n\ntest<-lapply(snp.by.gene.uniq[20:30], function(x){\n  i=parent.frame()$i[]\n  d.gene<-dist(t(x))\n  i<-i+10\n  return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste(\"gene \",i), \n                                                                        paste(\"SNPS\",nrow(x)))\n                                                                        \n  ))\n  #return(plot(tsne(d.gene)))\n}\n)\npar(mfrow=c(1,1))\ntest<-lapply(snp.by.gene.uniq[n1:n2], function(x){\n  \n  d.gene<-dist(t(x))\n  return(plot(princomp(t(gene1))$scores))\n  #return(plot(tsne(d.gene)))\n}\n)\ngene1\n\nplot(test,main=\"1-10\")\npar(mfrow=c(2,5))  \n\n\nplot(tsne(t(gene1)))\n_______________\nsnp.by.gene.uniq[1:10]\nlapply(snp.by.gene.uniq, function(x){\n  #dim(snp.by.gene.uniq)\n  dim(x)\n})\n\n\n?tsne\n\nd.gene<-dist(gene1)\nplot(tsne(d.gene,initial_dims=50, perplexity = 30))\nlength((d.gene[[1]]))\nnrow(d)\ndim(gene1)\ngene1\n\n## Not run: \ncolors = rainbow(length(unique(iris$Species)))\nnames(colors) = unique(iris$Species)\necb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species, col=colors[iris$Species]) }\n\ntsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)\n\n# compare to PCA\ndev.new()\n#pca_iris = \nprincomp(iris[,1:4])  #$scores[,1:2]\nprincomp(t(gene1))$scores[,1:2]\nplot(princomp(t(gene1))$scores)\n\ngene1\nplot(pca_iris, t='n')\n\ntext(pca_iris, labels=iris$Species,col=colors[iris$Species])\ndev.off()\n## End(Not run)\n## \n## \n## \n## \nlibrary(\"Rtsne\")\n?Rtsne\n\nRtsne(t(gene1))\ndim(gene1)\nu.gene1<-unique(gene1[ , ] )\ndim(u.gene1)\ndim(gene1)\nd.gene1<-dist(snp.by.gene.uniq[[1]])\ngene50<-snp.by.gene.uniq[[50]]\ngene1<-snp.by.gene.uniq[[1]]\nd.gene50<-dist(snp.by.gene.uniq[[50]])\ndim(unique(gene1[,1:ncol(gene1)]))\n\ndim(snp.by.gene.uniq[[1]])\nRtsne(d.gene1,N=6, is_distance =T,check_duplicates = FALSE,verbose=T, pca_scale=T)\nRtsne(gene1,N=6, is_distance =F,check_duplicates = FALSE, verbose=T, pca_scale=T)\n\nRtsne(X, dims = 2, initial_dims = 50, perplexity = 30,\n      theta = 0.5, check_duplicates = TRUE, pca = TRUE, max_iter = 1000,\n      verbose = FALSE, is_distance = FALSE, Y_init = NULL,\n      pca_center = TRUE, pca_scale = FALSE,\n      stop_lying_iter = ifelse(is.null(Y_init), 250L, 0L),\n      mom_switch_iter = ifelse(is.null(Y_init), 250L, 0L), momentum = 0.5,\n      final_momentum = 0.8, eta = 200, exaggeration_factor = 12, ...)\n\n\niris_unique <- unique(iris) # Remove duplicates\ndim(iris_unique)\ndim(iris_unique)\niris_matrix <- as.matrix(iris_unique[,1:4])\nset.seed(42) # Set a seed if you want reproducible results\ntsne_out <- Rtsne(iris_matrix) # Run TSNE\nhead(tsne_out)\n# Show the objects in the 2D tsne representation\nplot(tsne_out$Y,col=iris_unique$Species)\n\n# Using a dist object\ntsne_out <- Rtsne(dist(iris_matrix))\nplot(tsne_out$Y,col=iris_unique$Species)\n\n# Use a given initialization of the locations of the points\ntsne_part1 <- Rtsne(iris_unique[,1:4], theta=0.0, pca=FALSE,max_iter=350)\ntsne_part2 <- Rtsne(iris_unique[,1:4], theta=0.0, pca=FALSE, max_iter=150,Y_init=tsne_part1$Y)\nm.gene1<-as.matrix(gene1)\nRtsne(m.gene1[,1:5])\nm.gene1[,1:10]\n?dist\nd.gene1<-dist(gene1, )\nRtsne(d.gene1, check_duplicates = F, is_distance =T) \n\n\n\n---------------------\n  install.packages(c(\"devtools\",\"broom\",\"MASS\"))\nsource(\"http://www.bioconductor.org/biocLite.R\")\nbiocLite(c(\"Biobase\",\"snpStats\",\"DESeq2\"))\nbiocLite(c(\"apply\", \"anyMissing\", \"rowMedians\"))\nlibrary(devtools)\nlibrary(Biobase)\nlibrary(snpStats)\nlibrary(broom)\nlibrary(MASS)\nlibrary(DESeq2)\nlibrary(\"SnpMatrix\")\ndata(for.exercise)\nm<-signature(from = \"t(gene1)\", to = \"SnpMatrix\")\nm\nclass(t(gene1))\ntg<-t(gene1)\ndim(tg)\ny<-as.raw(tg)\nsnp.gene1<-new(\"SnpMatrix\",y, rownames(y))\n?as.raw\ny=as.raw(t(gene1))\nibsDist(tg)\nclass(as.array(tg))\n?as.array\nibs.stats(gene1)\nView(snp.gene1)\nsnp.gene1[1,]\nxxt(snp.gene1, correct.for.missing = F)\n?xxt\neigen(t(gene1), symmetric=TRUE)\n?xxt\ngene1\nuse <- seq(1, ncol(snps.10), 10)\n\nlength(use)\nstr(snps.10)\n\n\nsub.10 <- snps.10[,use]\nxxmat <- xxt(t(gene1), correct.for.missing=FALSE)\nView(xxmat)\nstr(sub.10)\n\nxxmat <- xxt(sub.10, correct.for.missing=FALSE)\nxxmat\nevv <- eigen(xxmat, symmetric=TRUE)\nevv\npcs <- evv$vectors[,1:5]\npcs  \nlibrary(ape)\nt=nj(dist.gene(gene1))##############\nt$\n  par(m)  \nsnpdata = sub.10@.Data\nsnpdata\nsubject.support$cc\nstatus = subject.support$cc\nstatus\nsnp1 = as.numeric(snpdata[,1])\nsnp1\nsnp1[snp1==0] = NA\ndim(m.cdgmp)\ndim(gene1)\nglm1 = glm(status ~ snp1,family=\"binomial\")\nglm1 = glm(t ~ tg,family=\"binomial\")\nglm1\nplot(glm1)\n\ntidy(glm1)\nm.cdgmp\nt <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))\ntg\nt\ntf<-factor(t)\n\nlibrary(\"glmnet\")\ntf<-as.factor(t)\ndf<-cbind(df,t)\ndf<-as.data.frame(cbind(tg,t))\ndf\nsparse.model.matrix(~.,df, sparsem=T)\nlibrary(Matrix)\nmt<-cbind(tg,t)\n\nset.seed(2)\nsplit<-sample(nrow(mt), floor(0.7*nrow(mt)))\nsplit\ntrain<-mt[split,]\ntest<-mt[-split,]\n#class(train)\ntrain<-df[split,]\ntest<-df[-split,]\ndim(train)\ndim(test)\nsparse.model.matrix(~.,train, sparsem=T)\nsparse.model.matrix(~.,test[1:10])\nlibrary(glmnet)\nas.matrix(train)\nmt<-as.matrix(train)\ndim(mt)\ndim(mtest)\nhead(mtest)\nmtest<-as.matrix(test)\n\nfit<-glmnet(mt, mt[,7])######\nfit\ncv<-cv.glmnet(mt,mt[,7],nfolds = 3)\n\npred<-predict(fit, mtest, type=\"response\",s=cv$lambda.min)\nround(pred)==mtest[,7]\nlibrary(pROC)\nplot(mtest[,7],pred)\nroc(mtest[,7],pred)\nclass(as.matrix(mtest[,7]))\n\nclass(train[,7])\ntrain\nglmnet()\nrownames(df)\nglmnet()\ncv<-cv.glmnet(tg, t, alpha = 1, nlambda = 100)#mean squared error\ncv<-cv.glmnet(tg, t, alpha = 1, family=\"binomial\",type.measure= \"class\",nlambda = 100)\nplot(cv)\nfit<-glmnet(tg, t, alpha = 1, lambda = cv$lambda.1se)\nfit<-glmnet(tg, t, alpha = 1, family=\"binomial\",lambda =  cv$lambda.1se)\n\nfit$beta[,1]\nplot(fit$beta)\n`plot(fit)\ncv$lambda.1se\n\n\nridge.mod<-glmnet(tg, tf, alpha = 1, nlambda = 100)\ntf\nridge.mod\npredict(ridge.mod, s = 0, exact = T, type = 'coefficients')\n\ncdgmp.data$logcdg\nstatus\nsnp1\ntidy(glm1)\n}\n[\n  }\n)\n#Random Forest\ncan be used for classification or regression\navoids overfitting\ncan deal with a large number of features \nhelps with feature selection based on importance\n#mtry predictors at each node\n#\n# default sq.root(p)\n#p/3 for regression\n#\ndata<-c(1,2,3,4,5)\n#\n#NSP is the response variable\nas.factor(data$NSP)\ntable(data$NSP)\nind <_sampe(2,nrow(data), repalce = T,prob = c(0.7, 0.3))\ntrain<-data[ind==1,]\ntest<-data[ind==2,]\n#1!ntree bottstrap samples\n#for eacn bootstrap sample ",
    "created" : 1501385804179.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "654062809",
    "id" : "A206BE38",
    "lastKnownWriteTime" : 8315142648826429446,
    "last_content_update" : 1501406980395,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled11"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
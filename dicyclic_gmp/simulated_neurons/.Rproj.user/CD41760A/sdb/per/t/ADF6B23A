{
    "collab_server" : "",
    "contents" : "rm(list=ls(all=TRUE))\nsetwd(\"~/msk-snp-cdgmp/cdg-data/\")\nsnp.data<-read.csv(\"cdgSNPmatrix-Jinyuan_roy.csv\", sep =\",\", header = T, row.names = 1)\nsnp.by.gene <- split(snp.data, strtrim(rownames(snp.data), 8))\nsnp.by.gene.uniq <- lapply(snp.by.gene, function(x) unique(x))\nsnps<-lapply(snp.by.gene.uniq, function(x) t(x))\nhead(snps)\nsnps\ncdgmp.data<-read.csv(\"cdgTable.csv2\", sep =\",\", header =T)\nm.cdgmp<-tapply(cdgmp.data$logcdg,cdgmp.data$strains,mean )\nnames(m.cdgmp)[16]<-gsub(\"pa_.+_\", \"\", names(m.cdgmp)[16])\nm.cdgmp<-m.cdgmp[rownames(snps[[1]])]\nm.cdgmp\ngene1<-snp.by.gene.uniq[[1]]\ngene50<-snp.by.gene.uniq[[50]]\neta=0.1#the learning rate\n\nweight_bias_list<-NULL\nweight_bias_list<- lapply(snps, function(x){\n  split.indeces<-split(1:30, sample(rep(1:2, c(20,10))))\n  training.snps<-x[split.indeces$`1`,]\n  #training.snps<-x[[1]][split.indeces$`1`,]\n  training.snps<-cbind(training.snps,co=rep(1,ncol(training.snps)))\n  training.snps\n  #training.snps\n  test.snps<-x[split.indeces$`2`,]\n  #test.snps<-x[[1]][split.indeces$`2`,]\n  test.snps<-cbind(test.snps,co=rep(1,nrow(test.snps)))\n  training.cdgmp<-m.cdgmp[rownames(training.snps)]\n  testing.cdgmp<-m.cdgmp[rownames(test.snps)]  \n  t1 <- as.matrix(ifelse(training.cdgmp > -.5, 1,0 )) # high\n  t2 <- as.matrix(ifelse(training.cdgmp < -.5 & training.cdgmp > -1.5, 1,0)) # medium \n  t3 <- as.matrix(ifelse(training.cdgmp  < -1.5 , 1,0 )) #low\n  targets<-cbind(t1,t2,t3)\n  training.snps\n  neuron1 <- runif(ncol(training.snps)-1, 1e-3, 1e-2)\n  neuron2 <- runif(ncol(training.snps)-1, 1e-3, 1e-2)\n  neuron3 <- runif(ncol(training.snps)-1, 1e-3, 1e-2)\n  neuron1<- append(neuron1,runif(1))\n  neuron2<- append(neuron2,runif(1))\n  neuron3<- append(neuron3,runif(1))\n  weight_bias<-cbind(neuron1,neuron2, neuron3)\n  #  training.snps  \n  \n  return(list(targets=targets,training.snps=training.snps, crossvvalidatesnps=test.snps,weight_bias=weight_bias))\n})\n#gene=1;weight=1; neuron=1\n#\ngene=1\nas.matrix(weight_bias_list[[gene]]$training.snps)%*% as.matrix(weight_bias_list[[gene]]$weight_bias)\nff=    weight_bias_list[[1]]$weight_bias\nlength(weight_bias_list[1:2])\nfor (gene in 1:length(weight_bias_list[1:2])){\n  for (generation in 1:10000){\n    nweights=ncol(weight_bias_list[[gene]]$training.snps)-1\n    linear.combination<- as.matrix(weight_bias_list[[gene]]$training.snps)%*% as.matrix(weight_bias_list[[gene]]$weight_bias)\n    y <- exp(linear.combination) / rowSums(exp(linear.combination))\n    e<-weight_bias_list[[1]]$targets-y\n    \n    for (neuron in 1:3){\n      weight_bias_list[[gene]]$weight_bias[nweights+1,neuron]=weight_bias_list[[gene]]$weight_bias[nweights+1,neuron]-eta*(-sum(e[,neuron])/20)\n      \n      \n      for (weight in 1:nweights){\n        gc<-  weight_bias_list[[gene]]$weight_bias[weight,neuron]*e[,neuron]\n        weight_bias_list[[gene]]$weight_bias[weight,neuron]=weight_bias_list[[gene]]$weight_bias[weight,neuron]-eta*(-sum(gc)/20)\n      }\n    }\n  }  \n}\nff-    weight_bias_list[[1]]$weight_bias\n\nweight_bias_list[[1]]\nweight_bias_list[[1]]$weight_bias\nweight_bias_list[[1]]$crossvvalidatesnps\nweight_bias_list[[1]]$training.snps\ndim(weight_bias_list[[3]]$training.snps)\ngene\nstor<-list()\nfor (gene in 1:50){\nL<-weight_bias_list[[gene]]$training.snps %*%weight_bias_list[[gene]]$weight_bias\n#weight_bias_list[[1]]$crossvvalidatesnps%*%weight_bias_list[[1]]$weight_bias\n#weight_bias_list[[1]]$targets\ny <- exp(L) / rowSums(exp(L))\n\nrowSums(exp(L))\nstor[[gene]]=length(which(round(y[,1])==weight_bias_list[[gene]]$targets[,1] & round(y[,2])==weight_bias_list[[gene]]$targets[,2] & round(y[,3])==weight_bias_list[[gene]]$targets[,3]))/nrow(weight_bias_list[[gene]]$targets)\n\n}\n\nstor\nplot()\nstor\n?max.col\nlength(which(round(y[,1])==weight_bias_list[[1]]$targets[,1] & round(y[,2])==weight_bias_list[[1]]$targets[,2] & round(y[,3])==weight_bias_list[[1]]$targets[,3]))/nrow(weight_bias_list[[1]]$targets)\n\nhits<-length(which(round(y[,1])==targets[,1] & round(y[,2])==targets[,2] & round(y[,3])==targets[,3]))\nhit.acc<-rbind(hit.acc, hits/20)\n\n\n\ntest1 <- as.matrix(ifelse(testing.cdgmp > -.5, 1,0 )) # high\ntest2 <- as.matrix(ifelse(testing.cdgmp < -.5 & testing.cdgmp > -1.5, 1,0)) # medium \ntest3 <- as.matrix(ifelse(testing.cdgmp  < -1.5 , 1,0 )) #low\ntest.targets<-cbind(test1,test2,test3)\n\ntest.snps<-cbind(test.snps,rep(1,10))\n\ntest.line<-test.snps %*% final.wts2\ntest.y <- exp(test.line) / rowSums(exp(test.line))\ntest.hits<-length(which(round(test.y[,1])==test.snps[,1] & round(test.y[,2])==test.snps[,2] & round(test.y[,3])==test.snps[,3]))\n\ntest.hit.acc<-rbind(test.hit.acc,test.hits/10, deparse.level = 1)\n}\nperformance<-list(hit.acc, range(hit.acc), test.hit.acc, range(test.hit.acc))\nnames(performance)<-c(\"self-prediction\",\"range_self_predict\", \"external.prediction\", \"range_external_prediction\")\nreturn(performance)\n}\n\n\nout<-lapply(snp.by.gene.uniq, function(x)\n  neuralFunction(x)\n)\n\nout.df <- lapply(out, function(x) data.frame(self=unlist(x$`self-prediction`[,1]), target=unlist(x$`external.prediction`[,1])))\n\nfor(i in 1:length(out.df)) {\n  n <- names(out.df[i]);\n  boxplot(out.df[[i]], ylim=c(0,1), ylab=\"accuracy\", las=1, main=n);\n  stripchart(out.df[[i]], vertical = T, method = 'jitter', add = TRUE, pch=16, col=1:2, ylim=c(0,1));\n}\n\n\nlibrary(ape)\n\nsetwd(\"~/msk-snp-cdgmp/cdg-data/\")\ntr=read.tree(\"cdg-tree-v1-mid.dnd\")\ntxt.names=read.table(\"cdg.strains.txt3\", sep=\"\\t\", header = F, row.names = 1)\ntr$tip.label <- as.character(txt.names[tr$tip.label,]) #\n#tr$tip.label<-as.character(txt.names$V2[match(tr$tip.label, txt.names$V1)])\nplot(tr, font =1)\nadd.scale.bar()\n\nlibrary(phylobase)\n\nlibrary(phylotools)\n\ntr$tip.label<-gsub(\"pa_.+_\", \"\",tr$tip.label)\nt.snp.data<-t(snp.data)\nace(t.snp.data[tr$tip.label,1],tr,type= \"d\")\n\n\nplot(tr)\n\ncolumn=1\nco <- c(\"blue\", \"yellow\")\ntr.unrooted<-unroot(tr)\nplot.mpr <- function(column=1) {\n  plot.phylo(tr, main = colnames(t.snp.data)[column])\n  tmpr<-MPR(t.snp.data[,column], tr.unrooted, outgroup = \"F34365\")\n  #nodelabels(paste(\"[\", tmpr[, 1], \",\", tmpr[, 2], \"]\", sep = \"\")) \n  tiplabels(t.snp.data[,column][tr.unrooted$tip.label], adj = -2)\n  return(tmpr)\n}\n\n\n\n\n\n# \n# tmpr\n# class(tr$tip.label)\n# dim(tr$tip.label)\n# match(tr$tip.label, t.snp.data)\n# snp.data\n# \n# rownames(t.snp.data)\n# tr$tip.label\n# match(rownames(t.snp.data), tr$tip.label)\n# length(match(rownames(t.snp.data), tr$tip.label))\n# ace([tr.unrooted$tip.label,1],tr,type= \"d\")\n# snp.data[tr$tip.label,1]\n# dim(t.snp.data)\n# \n# tr$tip.label\n# \n# class(t.snp.data[,1])\n# dim(t.snp.data[,1])\n# structure(t.snp.data[,1])\n# \n# tr$tip.label\n# dim(t(snp.data))\n# ######ace(t.snp.data[tr$tip.label,1],tr,type= \"d\")\n# \n# dim(as.matrix(t(snp.by.gene.uniq)))\n# ace(t(snp.data,tr, type=\"d\"))\n# tr\n# dim(t(snp.data))\n# ace([tr.unrooted$tip.label,1],tr,type= \"d\")\n# length(snp.by.gene.uniq)\n# tr\n# as.matrix(tr)\n# ph.t <- t(ph.mat)\n# rownames(ph.t) <- gsub(\"X\", \"x\", rownames(ph.t))\n# rownames(t.snp.data)[tr$tip.label,1]\n# dim(t.snp.data[,1])\n# \n# ace(t.snp.data[tr$tip.label,1],tr,type=\"d\")\n# t.snp.data[tr$tip.label,1]\n# strep.ace<-ace(ph.t[tr.unrooted$tip.label,1],tr,type= \"d\")\n# co <- c(\"blue\", \"yellow\")\n# \n# \n# ##dist(snp.by.gene.uniq)\n\n# #reducing the data dimensionality, grouping by hclust\n#dist.training.snps<-dist(training.snps, method = 'manhattan')\n# cluster.dist.training.snps<-hclust(dist.training.snps)\n# plot(cluster.dist.training.snps)\n# ct<-cutree(cluster.dist.training.snps, k=4)\n# length(which(ct ==1))\n# length(snps[which(ct == 1)])\n\n#neuralFunction<-function(x){\nperformance<-list()\n# dim(weight_bias_list[[1]]$training.snps)\n# weight_bias_list[[1]]$training.snps\n# dim(weight_bias_list[[1]]$weight_bias)\n# weight_bias_list[[1]]$weight_bias\n# \n# as.matrix(weight_bias_list[[1]]$training.snps)%*% as.matrix(weight_bias_list[[1]]$weight_bias)\n\n# dim(as.matrix(weight_bias_list[[1]]$training.snps))\n# as.matrix(weight_bias_list[[1]]$training.snps)\n# dim(as.matrix(weight_bias_list[[1]]$weight_bias))\n# as.matrix(weight_bias_list[[1]]$weight_bias)\n",
    "created" : 1500780440941.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "18|44|45|0|\n",
    "hash" : "777418970",
    "id" : "ADF6B23A",
    "lastKnownWriteTime" : 1501407112,
    "last_content_update" : 1501407112524,
    "path" : "~/msk-snp-cdgmp/cdg-data/three_neuron_model_2.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled4"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
, verbose = TRUE #print the preliminary output
)
dim(t)
dim(all)
all[1:end_trn,]
dim(all[1:end_trn,] )
Model = gbm.fit(
x = all#[1:end_trn,] #dataframe of features
, y = t #dependent variable
#two ways to fit the model
#use gbm.fit if you are going to specify x = and y =
#instead of using a formula
#if there are lots of features, I think it's easier to specify
#x and y instead of using a formula
, distribution = "bernoulli"
#use bernoulli for binary outcomes
#other values are "gaussian" for GBM regression
#or "adaboost"
, n.trees = ntrees
#Choose this value to be large, then we will prune the
#tree after running the model
, shrinkage = 0.01
#smaller values of shrinkage typically give slightly better performance
#the cost is that the model takes longer to run for smaller values
, interaction.depth = 3
#use cross validation to choose interaction depth!!
, n.minobsinnode = 10
#n.minobsinnode has an important effect on overfitting!
#decreasing this parameter increases the in-sample fit,
#but can result in overfitting
, nTrain = round(end_trn * 0.8)
#use this so that you can select the number of trees at the end
# , var.monotone = c()
#can help with overfitting, will smooth bumpy curves
, verbose = TRUE #print the preliminary output
)
?gbm
tg<-t(gene1)
mt<-tg#cbind(tg,t)
split<-sample(nrow(mt), floor(0.7*nrow(mt)))
train<-mt[split,]
test<-mt[-split,]
t
N <- 1000
X1 <- runif(N)
X2 <- 2*runif(N)
X3 <- ordered(sample(letters[1:4],N,replace=TRUE),levels=letters[4:1])
X4 <- factor(sample(letters[1:6],N,replace=TRUE))
X5 <- factor(sample(letters[1:3],N,replace=TRUE))
X6 <- 3*runif(N)
mu <- c(-1,0,1,2)[as.numeric(X3)]
SNR <- 10 # signal-to-noise ratio
Y <- X1**1.5 + 2 * (X2**.5) + mu
sigma <- sqrt(var(Y)/SNR)
Y <- Y + rnorm(N,0,sigma)
X1[sample(1:N,size=500)] <- NA
X4[sample(1:N,size=300)] <- NA
data <- data.frame(Y=Y,X1=X1,X2=X2,X3=X3,X4=X4,X5=X5,X6=X6)
Y
X1
dim(Y)
length(Y)
length(X1)
train
data <- data.frame(Y=t,X1=train[,1],X2=train[,2],X3=train[,3],X4=train[,4],X5=train[,5],X6= train[,6])
train
train<-tg
data <- data.frame(Y=t,X1=train[,1],X2=train[,2],X3=train[,3],X4=train[,4],X5=train[,5],X6= train[,6])
gbm1 <-
gbm(Y~X1+X2+X3+X4+X5+X6,         # formula
data=data,                   # dataset
var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
# +1: monotone increase,
#  0: no monotone restrictions
distribution="gaussian",     # see the help for other choices
n.trees=1000,                # number of trees
shrinkage=0.05,              # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=3,         # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = 3,                # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
gbm1 <-
gbm(Y~X1+X2+X3+X4+X5+X6,         # formula
data=data,                   # dataset
var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
# +1: monotone increase,
#  0: no monotone restrictions
distribution="binomial",     # see the help for other choices
n.trees=1000,                # number of trees
shrinkage=0.05,              # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=3,         # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = 3,                # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
library("tsne")
library("Rtsne")
d.gene1<-dist(snp.by.gene.uniq[[1]])
snp.data<-read.csv("~/msk-snp-cdgmp/cdg-data/cdgSNPmatrix-Jinyuan_roy.csv", sep =",", header = T, row.names = 1)
snp.by.gene <- split(snp.data, strtrim(rownames(snp.data), 8))
snp.by.gene.uniq <- lapply(snp.by.gene, function(x) unique(x))
snps<-lapply(snp.by.gene.uniq, function(x) t(x))
head(snps)
snps
cdgmp.data<-read.csv("cdgTable.csv2", sep =",", header =T)
m.cdgmp<-tapply(cdgmp.data$logcdg,cdgmp.data$strains,mean )
names(m.cdgmp)[16]<-gsub("pa_.+_", "", names(m.cdgmp)[16])
m.cdgmp<-m.cdgmp[rownames(snps[[1]])]
m.cdgmp
gene1<-snp.by.gene.uniq[[1]]
t <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))
tg<-t(gene1)
split<-sample(nrow(mt), floor(0.7*nrow(mt)))
train<-mt[split,]
test<-mt[-split,]
split<-sample(nrow(mt), floor(0.75*nrow(mt)))
train<-mt[split,]
test<-mt[-split,]
dim(train)
split<-sample(nrow(mt), floor(0.70*nrow(mt)))
train<-mt[split,]
test<-mt[-split,]
d.gene1<-dist(snp.by.gene.uniq[[1]])
gene50<-snp.by.gene.uniq[[50]]
gene1<-snp.by.gene.uniq[[1]]
d.gene50<-dist(snp.by.gene.uniq[[50]])
p.value(gene1, df =1)
n1<-31
n2<-40
par(mfrow=c(2,5))
test<-lapply(snp.by.gene.uniq[n1:n2], function(x){
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",n1)))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[n1], function(x){
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",n1)))
#return(plot(tsne(d.gene)))
}
)
x <- list(a=11,b=12,c=13) # Changed to list to address concerns in commments
lapply(seq_along(x), function(y, n, i) { paste(n[[i]], y[[i]]) }, y=x, n=names(x))
seq_along(x)
lapply(snp.by.gene.uniq[1:10], function(x,y,n,i){
paster(n[[i]], y[[i]], y=x, n=names(x))
})
lapply(snp.by.gene.uniq[1:10], function(x,y,n,i){
paste(n[[i]], y[[i]], y=x, n=names(x))
})
x<-snp.by.gene.uniq[1:10]
lapply(snp.by.gene.uniq[1:10], function(x,y,n,i){
paste(n[[i]], y[[i]], y=x, n=names(x))
})
lapply(snp.by.gene.uniq[1:10], function(y,n,i){
paste(n[[i]], y[[i]], y=x, n=names(x))
})
lapply(x, function(y,n,i){
paste(n[[i]], y[[i]], y=x, n=names(x))
})
lapply(x, function(y,n,i){
y[[i]], y=x, n=names(x)
})
lapply(x, function(y,n,i){
y[[i]], y=x, n=names(x)
})
lapply(x, function(y,n,i){
y[[i]]
y=x
n=names(x)
})
jj<-lapply(x, function(y,n,i){
y[[i]]
y=x
n=names(x)
})
jj<-lapply(x, function(i){
print(x[[i]])
})
str(x)
class(x)
jj<-lapply(unlist(x), function(i){
print(x[[i]])
})
jj<-lapply(unlist(x), function(i){
print(i)
})
jj<-lapply(unlist(x), function(i){
print(x[[i]])
})
jj<-lapply(unlist(x), function(i){
paste(names(x)[[i]], x[[i]]))
})
jj<-lapply(unlist(x), function(i){
paste(names(x)[[i]], x[[i]])
})
test<-lapply(snp.by.gene.uniq[1:10], function(x,i){
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",i)))
#return(plot(tsne(d.gene)))
}
)
Map(x,i)
x
Map(unlist(x),i)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",i)))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",i)))
#return(plot(tsne(d.gene)))
}
)
par(mfrow=c(1,1))
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",i)))
#return(plot(tsne(d.gene)))
}
)
snp.by.gene.uniq[1]
nrow(snp.by.gene.uniq[1])
nrow(snp.by.gene.uniq[[1]])
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c("gene",i, nrow(x[[i]]))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(i, nrow(x[[i]]))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(i, nrow(x))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(c("gene ",i), nrow(x))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i), nrow(x))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",paste("SNP",i), nrow(x))))
#return(plot(tsne(d.gene)))
}
)
par(mfrow=c(1,1))
test<-lapply(snp.by.gene.uniq[n1:n2], function(x){
d.gene<-dist(t(x))
return(plot(princomp(t(gene1))$scores))
#return(plot(tsne(d.gene)))
}
)
gene1
plot(test,main="1-10")
par(mfrow=c(2,5))
plot(tsne(t(gene1)))
_______________
snp.by.gene.uniq[1:10]
lapply(snp.by.gene.uniq, function(x){
#dim(snp.by.gene.uniq)
dim(x)
})
?tsne
d.gene<-dist(gene1)
plot(tsne(d.gene,initial_dims=50, perplexity = 30))
length((d.gene[[1]]))
nrow(d)
dim(gene1)
gene1
## Not run:
colors = rainbow(length(unique(iris$Species)))
names(colors) = unique(iris$Species)
ecb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species, col=colors[iris$Species]) }
tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",paste("SNP",i)), nrow(x))))
#return(plot(tsne(d.gene)))
}
)
par(mfrow=c(1,1))
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",paste("SNP",i)), nrow(x))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),paste("SNP",i)), nrow(x))))
#return(plot(tsne(d.gene)))
}
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),paste("SNP",i)), nrow(x)))
#return(plot(tsne(d.gene)))
}
)
library("tsne")
library("Rtsne")
snp.data<-read.csv("~/msk-snp-cdgmp/cdg-data/cdgSNPmatrix-Jinyuan_roy.csv", sep =",", header = T, row.names = 1)
snp.by.gene <- split(snp.data, strtrim(rownames(snp.data), 8))
snp.by.gene.uniq <- lapply(snp.by.gene, function(x) unique(x))
snps<-lapply(snp.by.gene.uniq, function(x) t(x))
head(snps)
snps
cdgmp.data<-read.csv("cdgTable.csv2", sep =",", header =T)
m.cdgmp<-tapply(cdgmp.data$logcdg,cdgmp.data$strains,mean )
names(m.cdgmp)[16]<-gsub("pa_.+_", "", names(m.cdgmp)[16])
m.cdgmp<-m.cdgmp[rownames(snps[[1]])]
m.cdgmp
gene1<-snp.by.gene.uniq[[1]]
t <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))
tg<-t(gene1)
mt<-tg#cbind(tg,t)
split<-sample(nrow(mt), floor(0.70*nrow(mt)))
train<-mt[split,]
test<-mt[-split,]
dim(train)
d.gene1<-dist(snp.by.gene.uniq[[1]])
gene50<-snp.by.gene.uniq[[50]]
gene1<-snp.by.gene.uniq[[1]]
d.gene50<-dist(snp.by.gene.uniq[[50]])
n1<-31
n2<-40
par(mfrow=c(2,5))
x<-snp.by.gene.uniq[1:10]
str(x)
class(x)
x
Map(unlist(x),i)
nrow(snp.by.gene.uniq[[1]])
test<-lapply(snp.by.gene.uniq[1:2], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),paste("SNP",i)), nrow(x)))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i), nrow(x))))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i), paste("SNP",nrow(x))))
#return(plot(tsne(d.gene)))
}
)
par(mfrow=c(1,1))
test<-lapply(snp.by.gene.uniq[n1:n2], function(x){
d.gene<-dist(t(x))
return(plot(princomp(t(gene1))$scores))
#return(plot(tsne(d.gene)))
}
)
gene1
plot(test,main="1-10")
par(mfrow=c(2,5))
plot(tsne(t(gene1)))
_______________
snp.by.gene.uniq[1:10]
lapply(snp.by.gene.uniq, function(x){
#dim(snp.by.gene.uniq)
dim(x)
})
?tsne
d.gene<-dist(gene1)
plot(tsne(d.gene,initial_dims=50, perplexity = 30))
length((d.gene[[1]]))
nrow(d)
dim(gene1)
gene1
## Not run:
colors = rainbow(length(unique(iris$Species)))
names(colors) = unique(iris$Species)
ecb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species, col=colors[iris$Species]) }
tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)
library("tsne")
library("Rtsne")
snp.data<-read.csv("~/msk-snp-cdgmp/cdg-data/cdgSNPmatrix-Jinyuan_roy.csv", sep =",", header = T, row.names = 1)
snp.by.gene <- split(snp.data, strtrim(rownames(snp.data), 8))
snp.by.gene.uniq <- lapply(snp.by.gene, function(x) unique(x))
snps<-lapply(snp.by.gene.uniq, function(x) t(x))
head(snps)
snps
cdgmp.data<-read.csv("cdgTable.csv2", sep =",", header =T)
m.cdgmp<-tapply(cdgmp.data$logcdg,cdgmp.data$strains,mean )
names(m.cdgmp)[16]<-gsub("pa_.+_", "", names(m.cdgmp)[16])
m.cdgmp<-m.cdgmp[rownames(snps[[1]])]
m.cdgmp
gene1<-snp.by.gene.uniq[[1]]
t <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))
tg<-t(gene1)
mt<-tg#cbind(tg,t)
split<-sample(nrow(mt), floor(0.70*nrow(mt)))
train<-mt[split,]
test<-mt[-split,]
dim(train)
d.gene1<-dist(snp.by.gene.uniq[[1]])
gene50<-snp.by.gene.uniq[[50]]
gene1<-snp.by.gene.uniq[[1]]
d.gene50<-dist(snp.by.gene.uniq[[50]])
n1<-31
n2<-40
par(mfrow=c(2,5))
x<-snp.by.gene.uniq[1:10]
str(x)
class(x)
x
Map(unlist(x),i)
nrow(snp.by.gene.uniq[[1]])
test<-lapply(snp.by.gene.uniq[1:10], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),
paste("SNP",nrow(x)))
))
#return(plot(tsne(d.gene)))
}
)
c(21,":",30)
c(21,:,30)
noquote(c(21,:,30))
noquote(c(21,":",30))
ran=noquote(c(21,":",30))
ran
test<-lapply(snp.by.gene.uniq[ran], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),
paste("SNPS",nrow(x)))
))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[ran], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),
paste("SNPS",nrow(x)))
))
#return(plot(tsne(d.gene)))
}
)
test<-lapply(snp.by.gene.uniq[1], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),
paste("SNPS",nrow(x)))
))
#return(plot(tsne(d.gene)))
}
)
par(mfrow=c(1,1))
test<-lapply(snp.by.gene.uniq[20:30], function(x){
i=parent.frame()$i[]
d.gene<-dist(t(x))
i<-i+10
return(plot(tsne(d.gene,initial_dims=nrow(x), perplexity = 2), main=c(paste("gene ",i),
paste("SNPS",nrow(x)))
))
#return(plot(tsne(d.gene)))
}
)

sum(abs(target-pred))
accuracy<-function(x,s){
lapply(snp.by.gene.uniq, function(x){
x<-t(x)
i=parent.frame()$i[]
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
target<-abs(target)
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)#p
acc<-sum(abs(target-pred))
})
}
acc
accuracy()
accuracy<-function(x,s){
lapply(snp.by.gene.uniq, function(x){
x<-t(x)
i=parent.frame()$i[]
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
target<-abs(target)
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)#p
acc<-sum(abs(target-pred))/100
})
}
accuracy
accuracy<-function(x,s){
lapply(snp.by.gene.uniq, function(x){
x<-t(x)
i=parent.frame()$i[]
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
target<-abs(target)
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)#p
acc<-sum(abs(target-pred))/100
})
}
accuracy
accuracy(snp.by.gene.uniq)
abs(target-pred)
target-pred
t
target-pred
abs(target-pred)
sum(abs(target-pred))
cor.test(pred[,1], target)
summary(lm( target ~ pred[,1]))$r.squared
target
pred
summary(lm( target ~ pred[,1]))$r.squared
cor.test(pred[,1], target)
cor.test(pred[,1], target)$p.value
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
target<-target
fit <- glmnet(train.m, target, family = "poisson")
train.m
fit <- glmnet(train.m, target, family = "poisson")
target
target+1
target+2
target+5
target+10
target<-target+10
fit <- glmnet(train.m, target, family = "poisson")
r.corr<-vector()
pvalues<-vector()
r.co<-vector()
target
r.corr<-vector()
pvalues<-vector()
r.co<-vector()
for (c in 1:50){
x<-t(snp.by.gene.uniq[[c]])
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)
r<-cor.test(pred[,1], target)
r.corr[[c]]<-r$estimate
pvalues[[c]]<-r$p.value
r.co[[c]]<-summary(lm(target ~ pred[,1]))$r.squared
}
target
target<-m.cdgmp+10
target
for (c in 1:50){
x<-t(snp.by.gene.uniq[[c]])
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)
r<-cor.test(pred[,1], target)
r.corr[[c]]<-r$estimate
pvalues[[c]]<-r$p.value
r.co[[c]]<-summary(lm(target ~ pred[,1]))$r.squared
}
target
target<-m.cdgmp+10
target
for (c in 1:50){
x<-t(snp.by.gene.uniq[[c]])
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)
r<-cor.test(pred[,1], target)
r.corr[[c]]<-r$estimate
pvalues[[c]]<-r$p.value
r.co[[c]]<-summary(lm(target ~ pred[,1]))$r.squared
}
target
target<-m.cdgmp+10
t<-target+10
t
t<-m.cdgmp+10
t
r.corr<-vector()
pvalues<-vector()
r.co<-vector()
for (c in 1:50){
x<-t(snp.by.gene.uniq[[c]])
split<-sample(nrow(x), floor(0.7*nrow(x)))
train.d<-as.matrix(cbind(x,t)[split,])
test.d<-as.matrix(cbind(x,t)[-split,])
train.m<-train.d[,-ncol(train.d)]
target<-train.d[,ncol(train.d)]
fit <- glmnet(train.m, target, family = "poisson")
cv<-cv.glmnet(train.m,target,nfolds = 10)#cross_validate to get the best lambda
pred<-predict(fit, train.m, type="response",s=cv$lambda.min)
r<-cor.test(pred[,1], target)
r.corr[[c]]<-r$estimate
pvalues[[c]]<-r$p.value
r.co[[c]]<-summary(lm(target ~ pred[,1]))$r.squared
}
cor.test(pred[,1], target)$p.value
par(mfrow=c(1,3))
hist(r.corr, main= "Association-Correlation", col = "red")
hist(pvalues, main = "P-values", col="blue")
hist(r.co, main= "R-squared", col="green")
t
glmnet(snp.by.gene.uniq, t, family = "mgaussian")
lapply(snp.by.gene.uniq, function(x){
glmnet(x, t, family = "mgaussian")
})
snp.by.gene.uniq[[1]]
lapply(snp.by.gene.uniq, function(x){
glmnet(t(x), t, family = "mgaussian")
})
lapply(snp.by.gene.uniq, function(x){
glmnet(t(x), t, family = "mgaussian",type.multinomial = "grouped")
})
glmnet(t(x), t, family = "mgaussian",type.multinomial = "grouped")
glmnet(t(snp.by.gene.uniq), t, family = "mgaussian",type.multinomial = "grouped")
unlist(np.by.gene.uniq)
unlist(snp.by.gene.uniq)
t(unlist(snp.by.gene.uniq))
unlist(t(snp.by.gene.uniq))
unlist(t(snp.by.gene.uniq))[[1]]
unlist(t(snp.by.gene.uniq))[1]
glmnet(unlist(t(snp.by.gene.uniq)), t, family = "mgaussian",type.multinomial = "grouped")
as.matrix(unlist(snp.by.gene.uniq))
as.matrix(snp.by.gene.uniq)
glmnet(as.matrix(snp.by.gene.uniq), t, family = "mgaussian",type.multinomial = "grouped")
data(splice)
install.packages("grplasso")
library("grplasso")
data(splice)
splice
contr <- rep(list("contr.sum"), ncol(splice) - 1)
names(contr) <- names(splice)[-1]
fit <- grplasso(y ~ ., data = splice, model = LogReg(), lambda = 10,
contrasts = contr, standardize = TRUE)
splice$y
splice$contrasts
splice$contr
splice
str(splice)
fit <- grplasso(t ~ ., data = snp.by.gene.uniq, model = LogReg(), lambda = 10,
ontrasts = contr, standardize = TRUE)
fit <- grplasso(t ~ ., data = snp.by.gene.uniq, model = LogReg(), lambda = 10,
contrasts = contr, standardize = TRUE)
fit <- grplasso(t ~ ., data = snp.by.gene.uniq, model = LogReg(), lambda = 10,
contrasts = contr, standardize = TRUE)
fit <- grplasso(t ~ ., data = t(snp.by.gene.uniq), model = LogReg(), lambda = 10,
contrasts = contr, standardize = TRUE)
snp.by.gene.uniq
as.data.frame(snp.by.gene.uniq)
as.data.frame(t(snp.by.gene.uniq))
as.data.frame(t(snp.by.gene.uniq))[1]
as.data.frame(t(snp.by.gene.uniq))[2]
fit <- grplasso(t ~ ., data = as.data.frame(t(snp.by.gene.uniq)), model = LogReg(), lambda = 10,
contrasts = contr, standardize = TRUE)
fit <- grplasso(t ~ ., data = as.data.frame(t(snp.by.gene.uniq)), model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
class(t)
as.matrix(t)
fit <- grplasso(as.matrix(t) ~ ., data = as.data.frame(t(snp.by.gene.uniq)), model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
t<-as.matrix(t)
fit <- grplasso(t~ ., data = as.data.frame(t(snp.by.gene.uniq)), model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
as.data.frame(t(snp.by.gene.uniq))
as.matrix(t(snp.by.gene.uniq))
t<-as.matrix(t)
t<-as.matrix(t(snp.by.gene.uniq))
t<-as.matrix(t)
in<-as.matrix(t(snp.by.gene.uniq))
snp<-as.matrix(t(snp.by.gene.uniq))
t<-as.matrix(m.cdgmp)
snp<-as.matrix(t(snp.by.gene.uniq))
t<-as.matrix(m.cdgmp)
fit <- grplasso(t~ ., data = snp, model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
snp<-as.data.frame(t(snp.by.gene.uniq))
fit <- grplasso(t~ ., data = snp, model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
tg
snp<-cbind(snp,t)
fit <- grplasso(t~ ., data = snp, model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
snp
as.data.frame(t(snp.by.gene.uniq))
as.data.frame(snp.by.gene.uniq)
snp.by.gene.uniq
as.data.frame(t(snp.by.gene.uniq))
snp.by.gene.uniq
as.data.frame(t(snp.by.gene.uniq))
snp.by.gene.uniq
as.data.frame(t(snp.by.gene.uniq))
head(snp.by.gene)
t(snp.by.gene.uniq)
t(snp.by.gene.uniq)[[1]]
cbind(t(snp.by.gene.uniq)[[1]],t(snp.by.gene.uniq)[[1]])
t(snp.by.gene.uniq)[[1]]
t(snp.by.gene.uniq)
snp.by.gene.uniq[[2]]
t(snp.by.gene.uniq[[2]])
cbind(t(snp.by.gene.uniq[[2]]),t(snp.by.gene.uniq[[2]]))
man<-t(snp.by.gene.uniq[[2]])
for (i in 1:50){
cbind(man,t(snp.by.gene.uniq[[i]]))
}
man
for (i in 1:50){
man<-cbind(man,t(snp.by.gene.uniq[[i]]))
}
man
cbind(man,t)
man<-cbind(man,t)
fit <- grplasso(t~ ., data = man, model = LogReg(), lambda = 10,contrasts = contr, standardize = TRUE)
grplasso(t~ ., data = man)
class(man)
as.data.frame(man)
man<-as.data.frame(man)
grplasso(t~ ., data = man)
str(man)
grplasso(t~ ., data = man)
t
man[t]
t<-as.matrix(m.cdgmp)
man<-cbind(man,t)
grplasso(t~ ., data = man)
t
man<-NULL
for (i in 1:50){
man<-cbind(man,t(snp.by.gene.uniq[[i]]))
}
man
man<-cbind(man,t)
grplasso(t~ ., data = man)
man<-as.data.frame(man)
grplasso(t~ ., data = man)
man[t]
str(man)
man[t]
t<-as.matrix(m.cdgmp)
man<-cbind(man,t)
man[t]
man[,t]
dim(man)
man<-cbind(man,t)
dim(man)
man[,1081]
grplasso(t~ ., data = man)
man[,1080]
man[,1081]
man[,1079]
man[,1060]
man[,1070]
man[,1078]
man[,1079]
man<-man[,1:1079]
grplasso(t~ ., data = man)
man<-as.data.frame(man)
grplasso(t~ ., data = man)
?glmnet
?grplasso
?glmnet
?grplasso
man<-man[,1:1078]
dim(man)
man[,1:1078]
man[,1078]
t<-as.matrix(m.cdgmp)
grplasso(man,t)
as.matrix(man)
grplasso(as.matrix(man),t)
grplasso(as.matrix(man),as.matrix(t))
as.matrix(t)
grplasso(as.matrix(man),as.matrix(t))
as.matrix(t)
grplasso(as.matrix(man),as.matrix(t))
t
grplasso(as.matrix(man),as.matrix(t))
t
as.matrix(t)
snp.by.gene.uniq
grplasso(as.matrix(t(snp.by.gene.uniq[[1]])),as.matrix(t))
as.matrix(t(snp.by.gene.uniq[[1]]))
grplasso(as.matrix(t(snp.by.gene.uniq[[1]])),as.matrix(t))
as.matrix(t)
grplasso(as.matrix(t(snp.by.gene.uniq[[1]])),as.matrix(t))
grplasso(as.matrix(cbind(t(snp.by.gene.uniq[[1]]),rep(1,30))),as.matrix(t))
as.matrix(cbind(t(snp.by.gene.uniq[[1]]),rep(1,30)))
grplasso(as.matrix(cbind(t(snp.by.gene.uniq[[1]]),rep(1,30))),as.matrix(t))
data(splice)
contr <- rep(list("contr.sum"), ncol(splice) - 1)
names(contr) <- names(splice)[-1]
fit.splice <- grplasso(y ~ ., data = splice, model = LogReg(), lambda = 20,
contrasts = contr, center = TRUE, standardize = TRUE)
set.seed(79)
n <- 50  ## observations
p <- 4   ## variables
index <- c(NA, 2, 2, 3, 3)
x <- cbind(1, matrix(rnorm(p * n), nrow = n))
colnames(x) <- c("Intercept", paste("X", 1:4, sep = ""))
par <- c(0, 2.1, -1.8, 0, 0)
prob <- 1 / (1 + exp(-x %*% par))
mean(pmin(prob, 1 - prob)) ## Bayes risk
y <- rbinom(n, size = 1, prob = prob) ## binary response vector
lambda <- lambdamax(x, y = y, index = index, penscale = sqrt,
model = LogReg()) * 0.5^(0:5)
fit <- grplasso(x, y = y, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
plot(fit)
x
y
grplasso(as.matrix(cbind(,rep(1,30))),t(snp.by.gene.uniq[[1]]),as.matrix(t))
as.matrix(rep(1,30),t(snp.by.gene.uniq[[1]]))
grplasso(as.matrix(rep(1,30),t(snp.by.gene.uniq[[1]])),as.matrix(t))
as.matrix(rep(1,30),t(snp.by.gene.uniq[[1]]))
mat<-as.matrix(rep(1,30),t(snp.by.gene.uniq[[1]]))
grplasso(mat,as.matrix(t))
y
class(y)
grplasso(mat,t)
grplasso(mat,y)
groups <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))
grplasso(mat,groups)
groups
str(y)
y[,1:30]
y[1:30]
groups<-y[1:30]
grplasso(mat,groups)
?grplasso
index <- c(NA, 2, 2, 3, 3)
grplasso(mat,groups, index)
ncol(x)
colnames(mat)
colnames(y)
colnames(groups)
groups
colnames(snp.by.gene.uniq[[1]])
index=colnames(snp.by.gene.uniq[[1]])
grplasso(mat,groups, index)
c(1:30)
index=c(1:30)
grplasso(mat,groups, index)
ncol(x)
grplasso(as.matrix(cbind(rep(1,30))),t(snp.by.gene.uniq[[1]]),as.matrix(t))
groups
length(groups)
length(index)
length(mat)
grplasso(mat,groups, index)
ncol(mat)
snp.by.gene.uniq[[1]]
t(snp.by.gene.uniq[[1]])
ncol(t(snp.by.gene.uniq[[1]]))
groups<-y[1:6]
mat<-t(snp.by.gene.uniq[[1]]))
mat<-t(snp.by.gene.uniq[[1]])
grplasso(mat,groups, index)
mat<-as.matrix(rep(1,30),t(snp.by.gene.uniq[[1]]))
grplasso(mat,groups, index)
dim(mat)
mat<-as.matrix(rep(1,30),t(snp.by.gene.uniq[[1]]))
ncol(mat)
mat
mat<-as.matrix(cbind(rep(1,30),t(snp.by.gene.uniq[[1]])))
mat
dim(mat)
grplasso(mat,groups, index)
groups<-y[1:7]
mat<-as.matrix(cbind(rep(1,30),t(snp.by.gene.uniq[[1]])))
mat
grplasso(as.matrix(cbind(rep(1,30))),t(snp.by.gene.uniq[[1]]),as.matrix(t))
mat<-as.matrix(cbind(rep(1,30),t(snp.by.gene.uniq[[1]])))
mat
data(splice)
contr <- rep(list("contr.sum"), ncol(splice) - 1)
names(contr) <- names(splice)[-1]
fit.splice <- grplasso(y ~ ., data = splice, model = LogReg(), lambda = 20,
contrasts = contr, center = TRUE, standardize = TRUE)
set.seed(79)
n <- 50  ## observations
p <- 4   ## variables
index <- c(NA, 2, 2, 3, 3)
x <- cbind(1, matrix(rnorm(p * n), nrow = n))
colnames(x) <- c("Intercept", paste("X", 1:4, sep = ""))
par <- c(0, 2.1, -1.8, 0, 0)
prob <- 1 / (1 + exp(-x %*% par))
mean(pmin(prob, 1 - prob)) ## Bayes risk
y <- rbinom(n, size = 1, prob = prob) ## binary response vector
lambda <- lambdamax(x, y = y, index = index, penscale = sqrt,
model = LogReg()) * 0.5^(0:5)
fit <- grplasso(x, y = y, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
plot(fit)
x
dim(x)
class(y)
length(y)
index
dim(mat)
dim(groups)
length(groups)
index=c(1:7)
mat<-as.matrix(cbind(rep(1,30),t(snp.by.gene.uniq[[1]])))
grplasso(mat,groups, index)
length(groups)
im(mat)
dim(mat)
length(groups)
length(index)
dim(x)
length(y)
index
length(index)
grplasso(mat,groups, index)
x
index <- c(NA, 2, 2, 3, 3)
grplasso(x, y = y, index = index)
index=c(1:7)
fit <- grplasso(x, y = y, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
fit <- grplasso(mat, y = groups, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
index
length(y)
dim(mat)
length(groups)
groups <- as.matrix(ifelse(m.cdgmp < -1, 0,1 ))
length(groups)
fit <- grplasso(mat, y = groups, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
fit
fit2 <- grplasso(mat, y = groups, index = index, lambda = lambda, model = LogReg(),
penscale = sqrt,
control = grpl.control(update.hess = "lambda", trace = 0))
fit2
fit2$
grplasso(x, y = y, index = index)
fit2$x
summary(fit2)
grplasso(x, y = y, index = index)
quit()
target
class(target)
str(target)
quit()

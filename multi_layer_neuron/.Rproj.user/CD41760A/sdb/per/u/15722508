{
    "collab_server" : "",
    "contents" : "rm(list=ls(all=TRUE))\nx<-iris\neta=0.1#the learning rate\ntargets=data.frame(t1=c(rep(1,50),rep(0,50),rep(0,50)),t2=c(rep(0,50),rep(1,50),rep(0,50)),t3=c(rep(0,50),rep(0,50),rep(1,50)))\n\n#generates random weights, initializes weights, random bias and activation\ngneuron<-function(n){\n  w<-runif(4, 1e-3, 1e-2)#random weights\n  #w1=w[1];w2=w[2];w3=w[3];w4=w[4]#initiating weights\n  b<-runif(1)#random bias\n  x1<-iris[,1];x2<-iris[,2]; x3<-iris[,3]; x4<-iris[,4]\n  z=x1*w[1] + x2*w[2] + x3*w[3] + x4*w[4] +b\n  h<-list(z,w,b)\n  return(h)\n}\n\nl.neurons<-lapply(1:3, function(x) gneuron(x));names(l.neurons)<-c(\"z1\",\"z2\",\"z3\")\n\n\nweight_bias<-lapply(l.neurons, function(dx){\n  c(unlist(dx[2]),unlist(dx[3]))\n})\nm.weight_bias=matrix(unlist(weight_bias), ncol =3)\n\n#weight_history<-list(l.neurons[[1]][[2]],l.neurons[[2]][[2]],l.neurons[[3]][[2]])\nlinear.combination<-NULL\nm.weight_bias\nx2<-as.matrix(x[,1:4], ncol =4)\nx2<-cbind(x2,rep(1, 150))\n\nm1=m.weight_bias\n\nweight_history<-matrix()\nn.weight_history<-list()\nlist.n<-list()\ndf=apply(t(m.weight_bias),1, function(x){\n  data.frame(x)\n})\nstr(df)\n\nt(m.weight_bias)\nwb<-matrix()\nweights<-matrix()\nweights<-list()\nfor (generation in 1:10){\n  linear.combination<-x2 %*% m.weight_bias  \n  y <- exp(linear.combination) / rowSums(exp(linear.combination))\n  e<-targets-y\n  \n  fine=list()\n  \n  m.weight_bias=matrix(unlist(weight_bias), ncol =3)\n  m1=m.weight_bias\n  wdf=data.frame(w1=numeric(), w2=numeric(),w3=numeric(),w4=numeric(), b=numeric()) \n  wdf<-rbind(wdf,t(m.weight_bias)[1,])\n  for (generation in 1:1000){\n    linear.combination<-x2 %*% m.weight_bias  \n    y <- exp(linear.combination) / rowSums(exp(linear.combination))\n    e<-targets-y\n    \n  \n  for (neuron in 1:1){\n    m.weight_bias[5,neuron]=m.weight_bias[5,neuron]-eta*-sum(e[,neuron])/150    \n    for (weight in 1:4){\n      \n      gc<-x2[,weight]*e[,neuron]\n      m.weight_bias[weight,neuron]<-m.weight_bias[weight,neuron] - eta*-sum(gc)\n      \n    }\n    wdf<-rbind(wdf,t(m.weight_bias)[1,])\n  }  \n  }\n    wdf\n    \n    t(m.weight_bias)[1,]\n    t(m1)[1,]\n    \n    \n    m.weight_bias[weight,neuron]<-m.weight_bias[weight,neuron] - eta*-sum(gc)\n    \n    \n    \n    \n    \n    \n      gc<-matrix()\n      f\n      fine=gc\n      m.weight_bias[weight,neuron]<-m.weight_bias[weight,neuron] - eta*-sum(gc)\n      \n    }\n    wdf<-t(m.weight_bias)[1,]\n}\n\n\n\nx2[,weight]*e[,neuron]\n\nproduct<-NULL\nproduct[[weight]]<-x2[,weight]*e[,neuron]\n\n\nlength(fine)\nfine  \n\nx2[,1]*e[,1]\nwdf    \nm.weight_bias\ngc=append(gc,x2[r,weight] * e[r,neuron])\ngc\nsum(gc)\n?append\ngc    \ngc<-NULL    \n\ngc\nm1=m.weight_bias\nm1\nc.weights<-list()\n\nfor (weight in 1:4){\n  gc<-matrix()\n  for (r in 1:150){\n    gc<-rbind(gc,x2[r,weight] * e[r,neuron])\n  }\n  m.weight_bias[weight,neuron]<-m.weight_bias[weight,neuron] - eta*-sum(gc)\n\n}\n\nwdf<-t(m.weight_bias)[1,]\nwdf=data.frame(w1=numeric(), w2=numeric(),w3=numeric(),w4=numeric(), b=numeric())\nwdf\nrbind(c.weights[weight],m.weight_bias[weight,neuron])\n\nwb \nweights[,1]<-cbind(weights[,1],wb)\nweights\nwb<-rbind(wb,m.weight_bias[2,neuron])\ndf\nweights<-data.frame()\ncbind(weights,wb)\n\n  # for ( n in 1:3){\n  #   temp<-NULL\n  #   for (xw in 1:4){\n  #     temp<-cbind(temp,matrix(l.neurons[[n]][[2]][xw] %*% x[,xw], ncol =1 ))\n  #   }\n  #   linear.combination<-cbind(linear.combination,rowSums(temp)+l.neurons[[n]][[3]])\n  # }\n  # \n  y <- exp(linear.combination) / rowSums(exp(linear.combination))\n  e<-targets-y\n  \n  updated.wx<-NULL;gc<-NULL;delta.w<-NULL;n.r<-NULL;sum.w<-NULL;bias<-NULL;delta.bias<-NULL\n  \n  for (n in 1:3){  \n    #    delta.bias[[n]]<-append(bias,(-sum(e[,n])/150))\n    delta.bias[[n]]<- -sum(e[,n])/150\n    for (c in 1:4){\n      gc<-NULL\n      for (r in 1:150){\n        gc<-rbind(gc, x[r,c] * e[r,n])\n        print(gc)\n      }\n      delta.w[c]<- -sum(gc)/150  \n      \n    }\n    n.r[[n]]<-delta.w\n    l.neurons[[n]][[3]]= l.neurons[[n]][[3]]-eta*delta.bias[[n]]\n    l.neurons[[n]][[2]]=l.neurons[[n]][[2]]- eta*n.r[[n]]  \n    weight_history[[n]]<-rbind(weight_history[[n]],l.neurons[[n]][[2]])  \n    \n    \n    \n    \n  }\n  #str(weight_history)\n  m1=m.weight_bias\n  n=1\n  x2\n  \n  for (neuron in 1:3){\n    m.weight_bias[5,n]=m.weight_bias[5,n]-eta*-sum(e[,n])/150    \n    for (c in 1:4){\n      for (r in 1:150){\n        gc<-x2[r,c] * e[r,n]\n      }\n      delta.w<--sum(gc)/150\n      \n      m.weight_bias[c,n]<-delta.w\n    }\n    \n    \n  }\n  m1\n  m.weight_bias  \n  \n}\n\nweight_history[[1]][,1]\nplot(1:1001,weight_history[[1]][,1], ylim=c(-1000,1000), col=\"red\", ylab= \"weights\", xlab=\"Epochs\" )\nlines(1:1001,weight_history[[1]][,2], col=\"green\")\nlines(1:1001,weight_history[[1]][,3], col=\"blue\")\nlines(1:1001,weight_history[[1]][,4], col=\"orange\")\nlines(1:1001,weight_history[[2]][,1], col=\"green\")\nlines(1:1001,weight_history[[2]][,2], col=\"blue\")\nlines(1:1001,weight_history[[2]][,3], col=\"orange\")\nlines(1:1001,weight_history[[2]][,4], col=\"green\")\nlines(1:1001,weight_history[[3]][,1], col=\"blue\")\nlines(1:1001,weight_history[[3]][,2], col=\"orange\")\nlines(1:1001,weight_history[[3]][,3], col=\"green\")\nlines(1:1001,weight_history[[3]][,4], col=\"blue\")\n\n\n\n\nlines(1:1001,l.neurons[[2]][[2]][,1], col=\"green\")\nlines(1:1001,l.neurons[[2]][[2]][,2], col=\"green\")\nlines(1:1001,l.neurons[[2]][[2]][,3], col=\"green\")\nlines(1:1001,l.neurons[[2]][[2]][,4], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,1], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,2], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,3], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,4], col=\"green\")\nweight_history\nl.neurons[[n]][[5]]\nn\n\n\n\n##################\n\n\n\n\n\n\nfor(i in 1:10){\n  for(n in 1:3){\n    \n    l.neurons[[n]][[5]]<-rbind(l.neurons[[n]][[5]],l.neurons[[n]][[2]]) \n  }\n}\n\n\n\n\n\nl.neurons[[1]][[5]]\n\n\nplot(1:1001,l.neurons[[1]][[2]][,1], ylim=c(-300,300), col=\"red\", ylab= \"weights\", xlab=\"Epochs\" )\nlines(1:1001,l.neurons[[1]][[2]][,2], col=\"green\")\nlines(1:1001,l.neurons[[1]][[2]][,3], col=\"blue\")\nlines(1:1001,l.neurons[[1]][[2]][,4], col=\"orange\")\nlines(1:1001,l.neurons[[2]][[2]][,1], col=\"green\")\nlines(1:1001,l.neurons[[2]][[2]][,2], col=\"green\")\nlines(1:1001,l.neurons[[2]][[2]][,3], col=\"green\")\nlines(1:1001,l.neurons[[2]][[2]][,4], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,1], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,2], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,3], col=\"green\")\nlines(1:1001,l.neurons[[3]][[2]][,4], col=\"green\")\nl.neurons[[3]][[2]]\n\n\n# l.neurons[[1]][[2]] %*% x[,1:4]\n# \n# \n# for ( n in 1:3){\n#   temp<-NULL\n#   for (xw in 1:4){\n#   temp<-cbind(temp,matrix(l.neurons[[n]][[2]][xw] %*% x[,xw], ncol =1 ))\n#   }\n# l.neurons[[n]][[4]]<-temp[,1]+temp[,2]+temp[,3]+temp[,4]+l.neurons[[n]][[3]]\n# }\n\nfor (generation in \n     \n     \n     .\n     ",
    "created" : 1498590331650.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "931563242",
    "id" : "15722508",
    "lastKnownWriteTime" : 3328195709172275978,
    "last_content_update" : 1498600709273,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "source_window_id" : "wu5vebg8z1s2h",
        "tempName" : "Untitled3"
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
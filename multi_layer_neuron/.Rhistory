lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
?seq()
plot(0:0, xlim = c(1,1000), ylim=c(-3,3))
lines(1:1000,nwdf[[1]][[1]], col="2")
lines(1:1000,nwdf[[1]][[2]], col="2")
lines(1:1000,nwdf[[1]][[3]], col="2")
lines(1:1000,nwdf[[1]][[4]], col="2")
lines(1:1000,nwdf[[2]][[1]], col="4")
lines(1:1000,nwdf[[2]][[2]], col="4")
lines(1:1000,nwdf[[2]][[3]], col="4")
lines(1:1000,nwdf[[2]][[4]], col="4")
lines(1:1000,nwdf[[3]][[1]], col="6")
lines(1:1000,nwdf[[3]][[2]], col="6")
lines(1:1000,nwdf[[3]][[3]], col="6")
lines(1:1000,nwdf[[3]][[4]], col="6")
plot(0:0, xlim = c(1,1000), ylim=c(-3,3))
?legend()
legend("topright", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=1, horiz = T, cex = .9)
plot(1:1000,nwdf[[1]][[1]], ylim=c(-3,3), col="2", ylab= "weights", xlab="Epochs", type = )
plot(0:0, xlim = c(1,1000), ylim=c(-3,3))
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = sample(1:4, replace = F))
})
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topright", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=1, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=1, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=2, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=3, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=4, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=5, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=6, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=7, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=8, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=9, horiz = T, cex = .9)
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5))
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = sample(1:4, replace = F))
})
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
?lty
?lines
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5))
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = 1:4)# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = x[1:4])# sample(1:4, replace = F))
})
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5))
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = x[1:4])# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = x[c(1:4)])# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
lapply(1:4, function(y) return(y))
lines(1:1000, x, col="2", lty = y)# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
lapply(1:4, function(y) return(y))
lines(1:1000, x, col="2", lty = y)# sample(1:4, replace = F))
})
lapply(1:4, function(y) return(y))
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = y)# sample(1:4, replace = F))
})
y=3
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = y)# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
y<-lapply(1:4, function(y){ return(y)}  )
lines(1:1000, x, col="2", lty = y)# sample(1:4, replace = F))
})
y<-lapply(1:4, function(y){ return(y)}  )
y
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5))
for ( i in 1:4){
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = i)# sample(1:4, replace = F))
})
}
lapply(nwdf[[1]][1:4],function(x){
for ( i in 1:4){for ( i in 1:4){
lines(1:1000, x, col="2", lty = i)# sample(1:4, replace = F))
}
})
lapply(1:4, function(y) return(y))
y<-lapply(1:4, function(y){ return(y)}  )
y
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
?legend()
?lines
t(m.weight_bias)[1,]
t(m1)[1,]
lapply(nwdf[[1]][1:4],function(x){
for ( i in 1:4){for ( i in 1:4){
lines(1:1000, x, col="2", lty = i)# sample(1:4, replace = F))
}
})
lapply(1:4, function(y) return(y))
y<-lapply(1:4, function(y){ return(y)}  )
y
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
?legend()
?lines
t(m.weight_bias)[1,]
t(m1)[1,]
lapply(nwdf[[1]][1:4],function(x){
for ( i in 1:4){for ( i in 1:4){
lines(1:1000, x, col="2", lty = i)# sample(1:4, replace = F))
}
})
lapply(1:4, function(y) return(y))
y<-lapply(1:4, function(y){ return(y)}  )
y
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
?legend()
?lines
t(m.weight_bias)[1,]
t(m1)[1,]
lapply(nwdf[[1]][1:4],function(x){
for ( i in 1:4){
lines(1:1000, x, col="2", lty = i)# sample(1:4, replace = F))
}
})
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5))
lapply(nwdf[[1]][1:4],function(x){
for ( i in 1:4){
lines(1:1000, x, col="2", lty = i)# sample(1:4, replace = F))
}
})
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = 1:4)# sample(1:4, replace = F))
})
a <- array(1:4, c(2, 2, 2))
a
a <- array(1, c(2, 2, 2))
a
a <- array(1, c(2, 2))
a
a <- array(1, c(1, 2))
a
a <- array(1:4, c(1, 2))
a
a <- array(1:4, c(1:4))
a
a <- array(1:4, c(1,4))
a
lapply(nwdf[[1]][1:4],function(x){
a <- array(1:4, c(1,4))
lines(1:1000, x, col="2", lty = a)# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
a <- array(1:4, c(1,4))
lines(1:1000, x, col="2", lty = a)# sample(1:4, replace = F))
})
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5))
lapply(nwdf[[1]][1:4],function(x){
a <- array(1:4, c(1,4))
lines(1:1000, x, col="2", lty = a)# sample(1:4, replace = F))
})
it <- iapply(a, 3)
?iapply
apply(a,1)
apply(a,1, function(x) return(a))
apply(a,1, function(x) return(x))
lapply(nwdf[[1]][1:4],function(x){
apply(a,1, function(x) return(x))
lines(1:1000, x, col="2", lty = a)# sample(1:4, replace = F))
})
lapply(nwdf[[1]][1:4],function(x){
a=apply(a,1, function(x) return(x))
lines(1:1000, x, col="2", lty = a)# sample(1:4, replace = F))
})
a[1]
for (i in 1:4){
lapply(nwdf[[1]][1:4],function(x){
a[i]
lines(1:1000, x, col="2", lty = a[i])# sample(1:4, replace = F))
})
}
for (i in 1:4){
lapply(nwdf[[1]][1:4],function(x){
a[i]
lines(1:1000, x, col="2", lty = a[x])# sample(1:4, replace = F))
})
}
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = a[x])# sample(1:4, replace = F))
})
a[x]
nwdf[[1]][1:4]
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = a[x])# sample(1:4, replace = F))
print(i)
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(x[i])
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(x[i])
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(x[[i]])
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(x[i])
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(x[i][i])
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print([i])
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(i)
})
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(x[i])
})
sapply(seq_along(a), function(x){sum(y[x:length(a)])})
seq(a)
a[x]
lapply(nwdf[[1]][1:4],function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(a[x])
})
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(a[x])
})
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(a[[x]])
})
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(a[x])
})
lapply(nwdf[[1]][1:4],a,function(x,i){
lines(1:1000, x, col="2", lty = 1)# sample(1:4, replace = F))
print(a[x])
})
myfxn <- function(x,c,t){
lines(1:1000, x, col=c, lty = t)
}
lapply(nwdf[[1]][1:4],myfxn,red,t=1)
lapply(nwdf[[1]][1:4],myfxn,"1",t=1)
lapply(nwdf[[1]][1:4],myfxn,"1",t=2)
lapply(nwdf[[1]][1:4],myfxn,"1",t=3)
myfxn <- function(x,c,t){
lines(1:1000, x, col=c, lty = t)
}
lapply(nwdf[[1]][1:4],myfxn,"1",t=3)
myfxn <- function(x,c,t){
lines(1:1000, x, col=c, lty = t)
}
lapply(nwdf[[1]][1:4],myfxn,"blue",t=3)
lapply(nwdf[[1]][1:4],myfxn,nwdf[[1]][1:4],"blue",t=3)
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5) ,ylab= "weights", xlab="Epochs",)
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5) ,ylab= "weights", xlab="Epochs")
lapply(nwdf[[1]][1:4],a,function(x){
lines(1:1000, x, col="2", lty = sample(1:4, replace = F))
})
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5) ,ylab= "weights", xlab="Epochs")
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = sample(1:4, replace = F))
})
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
rm(list=ls(all=TRUE))
x<-iris
eta=0.1#the learning rate
targets=data.frame(t1=c(rep(1,50),rep(0,50),rep(0,50)),t2=c(rep(0,50),rep(1,50),rep(0,50)),t3=c(rep(0,50),rep(0,50),rep(1,50)))
gneuron<-function(n){
w<-runif(4, 1e-3, 1e-2)#random weights
b<-runif(1)#random bias
x1<-iris[,1];x2<-iris[,2]; x3<-iris[,3]; x4<-iris[,4]
z=x1*w[1] + x2*w[2] + x3*w[3] + x4*w[4] +b
h<-list(z,w,b)
return(h)
}
l.neurons<-lapply(1:3, function(x) gneuron(x));names(l.neurons)<-c("z1","z2","z3")
weight_bias<-lapply(l.neurons, function(dx){
c(unlist(dx[2]),unlist(dx[3]))
})
m.weight_bias=matrix(unlist(weight_bias), ncol =3)
x2<-as.matrix(x[,1:4], ncol =4);x2<-cbind(x2,rep(1, 150))
m.weight_bias=matrix(unlist(weight_bias), ncol =3)
wdf=data.frame(w1=numeric(), w2=numeric(),w3=numeric(),w4=numeric(), b=numeric())
nwdf<-list(wdf,wdf,wdf)
for (generation in 1:1000){
linear.combination<-x2 %*% m.weight_bias
y <- exp(linear.combination) / rowSums(exp(linear.combination))
e<-targets-y
for (neuron in 1:3){
m.weight_bias[5,neuron]=m.weight_bias[5,neuron]-eta*-sum(e[,neuron])/150
for (weight in 1:4){
gc<-x2[,weight]*e[,neuron]
m.weight_bias[weight,neuron]=m.weight_bias[weight,neuron] - eta* (-sum(gc)/150)
}
nwdf[[neuron]]<-rbind(nwdf[[neuron]],t(m.weight_bias)[neuron,])
}
plot(0:0, xlim = c(1,1000), ylim=c(-3,3.5) ,ylab= "weights", xlab="Epochs")
lapply(nwdf[[1]][1:4],function(x){
lines(1:1000, x, col="2", lty = sample(1:4, replace = F))
})
lapply(nwdf[[2]][1:4],function(x){
lines(1:1000, x, col="3", lty = sample(1:4, replace = F))
})
lapply(nwdf[[3]][1:4],function(x){
lines(1:1000, x, col="4", lty = sample(1:4, replace = F))
})
legend("topleft", legend = c("neuron 1","neuron 2", "neuron 3"), col=c("2","3","4"), pch=10, horiz = T, cex = .9)
nwdf
nwdf[[1]]
nwdf[[1]][[1]]
nwdf[[1]][[1]][1000]
nwdf[[1]][[1:5]][1000]
nwdf[[1]][1:5][1000]
nwdf[[1]][1:5]
nwdf[[1]][c(1:5)]
nwdf[[1]][c(1:5)][1000]
nwdf[[1]][[c(1:5)][1000]
#using weight and bias to predict species
l.bias<- as.numeric(bias.list[10000])
fw1<-as.numeric(weights1[10000]); fw2<-as.numeric(weights2[10000])
y=1/(1+exp(-(fw1*x1 + fw2 * x2 + l.bias)))
round(y,1)
weights1[10000]
#target accuracy at each iteration
plot(1:10000,tacc)
#tacc
#classifing two species
#class.species<-function(){
sp0<-x[which(x$Species == "versicolor"),]
sp1<-x[which(x$Species == "virginica"),]
plot(sp0$Sepal.Length, sp0$Petal.Length, col="red", ylim = c(2.8,6.4), ylab = "Petal length", xlab="Sepal length")
points(sp1$Sepal.Length, sp1$Petal.Length, col="blue")
legend("topleft", legend = c("versicolor","virginica"), col=c("red","blue"),pch=1, horiz = F, cex = .8)
slope=-(w1/w2)
intercept=-b/w2
abline(slope,intercept, col="black")
nwdf[[1]][[c(1:5)][1000]
#using weight and bias to predict species
l.bias<- as.numeric(bias.list[10000])
fw1<-as.numeric(weights1[10000]); fw2<-as.numeric(weights2[10000])
y=1/(1+exp(-(fw1*x1 + fw2 * x2 + l.bias)))
round(y,1)
weights1[10000]
#target accuracy at each iteration
plot(1:10000,tacc)
#tacc
#classifing two species
#class.species<-function(){
sp0<-x[which(x$Species == "versicolor"),]
sp1<-x[which(x$Species == "virginica"),]
plot(sp0$Sepal.Length, sp0$Petal.Length, col="red", ylim = c(2.8,6.4), ylab = "Petal length", xlab="Sepal length")
points(sp1$Sepal.Length, sp1$Petal.Length, col="blue")
legend("topleft", legend = c("versicolor","virginica"), col=c("red","blue"),pch=1, horiz = F, cex = .8)
slope=-(w1/w2)
intercept=-b/w2
abline(slope,intercept, col="black")
nwdf[[1]][[c(1:5)]][1000]
nwdf[[1]][1:5]
head(nwdf)
head(nwdf[[1]])
head(nwdf[[1]][1:5])
head(nwdf[[1]][1:5])[1]
head(nwdf[[1]][1:5])[1,1]
nwdf[[1]][1:5][,1]
nwdf[[1]][1:5][1,]
head(nwdf[[1]][1:5])[1,1]
head(nwdf[[1]])
nwdf[[1]][1:5][1,]
nwdf[[1]][1:5][1000,]
head(nwdf[[1]][1:5])
colnames(nwdf[[1]][1:5])
colnames(nwdf[[1]][1:5])<-c("weight.1", "weight.2","weight.3","weight.4","bias")
colnames(nwdf[[1]][1:5])
nwdf[[1]][1:5][1000,]
colnames(nwdf[[1]][1:5])<-c("weight.1", "weight.2","weight.3","weight.4","bias")
colnames(nwdf[[1]][1:5])
ames(nwdf[[1]][1:5])
names(nwdf[[1]][1:5])
names(nwdf[[1]][1:5])<-c("weight.1", "weight.2","weight.3","weight.4","bias")
names(nwdf[[1]][1:5])
nwdf[[1]][1:5][1000,]
y
max.col(y)
target
targets
max.col(targets)
max.col(targets)-max.col(y)
max.col(targets)
max.col(y)
max.col(targets)
max.col(y)==max.col(targets)
which(max.col(y)==max.col(targets))
length(which(max.col(y)==max.col(targets)))
length(which(max.col(y)==max.col(targets)))/150
rm(list=ls(all=TRUE))
x<-iris
eta=0.1#the learning rate
targets=data.frame(t1=c(rep(1,50),rep(0,50),rep(0,50)),t2=c(rep(0,50),rep(1,50),rep(0,50)),t3=c(rep(0,50),rep(0,50),rep(1,50)))
gneuron<-function(n){
w<-runif(4, 1e-3, 1e-2)#random weights
b<-runif(1)#random bias
x1<-iris[,1];x2<-iris[,2]; x3<-iris[,3]; x4<-iris[,4]
z=x1*w[1] + x2*w[2] + x3*w[3] + x4*w[4] +b
h<-list(z,w,b)
return(h)
}
l.neurons<-lapply(1:3, function(x) gneuron(x));names(l.neurons)<-c("z1","z2","z3")
weight_bias<-lapply(l.neurons, function(dx){
c(unlist(dx[2]),unlist(dx[3]))
})
m.weight_bias=matrix(unlist(weight_bias), ncol =3)
x2<-as.matrix(x[,1:4], ncol =4);x2<-cbind(x2,rep(1, 150))
m.weight_bias=matrix(unlist(weight_bias), ncol =3)
wdf=data.frame(w1=numeric(), w2=numeric(),w3=numeric(),w4=numeric(), b=numeric())
nwdf<-list(wdf,wdf,wdf)
accuracy<-list()
for (generation in 1:1000){
linear.combination<-x2 %*% m.weight_bias
y <- exp(linear.combination) / rowSums(exp(linear.combination))
e<-targets-y
for (neuron in 1:3){
m.weight_bias[5,neuron]=m.weight_bias[5,neuron]-eta*-sum(e[,neuron])/150
for (weight in 1:4){
gc<-x2[,weight]*e[,neuron]
m.weight_bias[weight,neuron]=m.weight_bias[weight,neuron] - eta* (-sum(gc)/150)
}
nwdf[[neuron]]<-rbind(nwdf[[neuron]],t(m.weight_bias)[neuron,])
}
accuracy[[generation]]<-length(which(max.col(y)==max.col(targets)))/150
}
accuracy
head(accuracy)
plot(1:1000, unlist(accuracy))
nwdf[[1]][[1:5]][1000]
nwdf[[1]][1:5][1000]
nwdf[[1]][1:5]
nwdf[[1]][1:5][1000,]
sp0<-x[which(x$Species == "versicolor"),]
sp1<-x[which(x$Species == "virginica"),]
x
sp0<-x[which(x$Species == "setosa"),]
sp1<-x[which(x$Species == "versicolor"),]
sp2<-x[which(x$Species == "virginica"),]
sp0
nwdf[[1]][1:5][1000,]
x2 %*% nwdf[[1]][1:5][1000,]
x2 %*% matrix(nwdf[[1]][1:5][1000,])
nwdf[[1]][1:5][1000,]
y
m.weight_bias
nwdf[[1]][1:5][1000,]
as.matrix(nwdf[[1]][1:5][1000,])
m.weight_bias
x2 %*% m.weight_bias
y
as.matrix(nwdf[[1]][1:5][1000,])
y
targets
quit()
